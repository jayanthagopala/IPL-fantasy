import React, { useState } from 'react';
import scheduleJson from './ipl-schedule-json.json';
import standingsData from './game-standings.json';

const ScheduleDisplay = () => {
  const [expandedMatch, setExpandedMatch] = useState(null);
  
  // Toggle match expansion
  const toggleMatch = (matchNo) => {
    if (expandedMatch === matchNo) {
      setExpandedMatch(null);
    } else {
      setExpandedMatch(matchNo);
    }
  };
  
  // Get standings for a specific match
  const getStandingsForMatch = (matchNo) => {
    // Check if standings data is properly structured
    if (!standingsData || !standingsData.standings || !Array.isArray(standingsData.standings)) {
      return [];
    }
    
    // Find the standings entry for this match number
    const matchStanding = standingsData.standings.find(
      standing => standing && standing.matchNo === matchNo
    );
    
    // If no specific standings exist for this match, use the default
    if (!matchStanding || !matchStanding.teams) {
      return standingsData.defaultStanding && standingsData.defaultStanding.teams 
        ? standingsData.defaultStanding.teams 
        : [];
    }
    
    return matchStanding.teams;
  };

  // Group matches by month
  const groupMatchesByMonth = (matches) => {
    const grouped = {};
    
    matches.forEach(match => {
      const dateParts = match.date.split('-');
      const monthNames = {
        '01': 'January',
        '02': 'February',
        '03': 'March',
        '04': 'April',
        '05': 'May',
        '06': 'June',
        '07': 'July',
        '08': 'August',
        '09': 'September',
        '10': 'October',
        '11': 'November',
        '12': 'December'
      };
      
      const monthKey = monthNames[dateParts[1]];
      
      if (!grouped[monthKey]) {
        grouped[monthKey] = [];
      }
      
      grouped[monthKey].push(match);
    });
    
    return grouped;
  };

  // Check if schedule data is available
  if (!scheduleJson || !scheduleJson.matches) {
    return <div className="error-message">No schedule data available</div>;
  }

  const groupedMatches = groupMatchesByMonth(scheduleJson.matches);

  // Remove any undefined values
  // standingsData.standings = standingsData.standings ? standingsData.standings.filter(Boolean) : [];

  return (
    <div className="schedule-container">
      <div className="schedule-list">
        {Object.entries(groupedMatches).map(([month, matches]) => (
          <div className="month-section" key={month}>
            <h2 className="month-title">{month}</h2>
            {matches.map((match) => (
              <div className="match-card" key={match.matchNo}>
                <div className="match-header" onClick={() => toggleMatch(match.matchNo)}>
                  <div className="match-info">
                    <div className="match-number">Match {match.matchNo}</div>
                    <div className="match-teams">{match.homeTeam} vs {match.awayTeam}</div>
                    <div className="match-details">
                      <div className="match-date">{match.date}</div>
                      <div className="match-venue">{match.venue}</div>
                      <div className="match-time">{match.time}</div>
                    </div>
                  </div>
                  <button className="expand-button">
                    {expandedMatch === match.matchNo ? 'Hide Leaderboard' : 'Show Leaderboard'}
                  </button>
                </div>
                
                {expandedMatch === match.matchNo && (
                  <div className="leaderboard-container">
                    <h3 className="leaderboard-title">Fantasy Points</h3>
                    <table className="leaderboard-table">
                      <thead>
                        <tr>
                          <th>Rank</th>
                          <th>Team</th>
                          <th>Points</th>
                        </tr>
                      </thead>
                      <tbody>
                        {getStandingsForMatch(match.matchNo).map((team) => (
                          team && team.teamName ? (
                            <tr key={team.teamName} className={team.rank <= 3 ? 'top-team' : ''}>
                              <td>{team.rank}</td>
                              <td>{team.teamName}</td>
                              <td>{team.points}</td>
                            </tr>
                          ) : null
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            ))}
          </div>
        ))}
      </div>
    </div>
  );
};

export default ScheduleDisplay; 